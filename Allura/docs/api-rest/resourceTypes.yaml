#       Licensed to the Apache Software Foundation (ASF) under one
#       or more contributor license agreements.  See the NOTICE file
#       distributed with this work for additional information
#       regarding copyright ownership.  The ASF licenses this file
#       to you under the Apache License, Version 2.0 (the
#       "License"); you may not use this file except in compliance
#       with the License.  You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#       Unless required by applicable law or agreed to in writing,
#       software distributed under the License is distributed on an
#       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#       KIND, either express or implied.  See the License for the
#       specific language governing permissions and limitations
#       under the License.

base:
    get?:
      responses: &standardResponses  # yaml syntax to alias properties
        200:
          description: OK
    put?:
      responses: *standardResponses
    patch?:
      responses: *standardResponses
    post?:
      responses:
        201:
          description: Created
    delete?:
      responses: *standardResponses
collection:
    type: base
    get:
      is: [ pageable, bearerAuth ]
generic:
    # this is really just a shorthand for us when we have a schema & example
    # so we couldn't come up with a good name and picked something generic :)
    type: base
    get:
      is: [ bearerAuth ]
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>
    post?:
    put?:
      body:
        application/json:
          schema: <<schema>>
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
    patch?:
      body:
        application/json:
          schema: <<schema>>
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
    delete?:
searchableCollection:
    get:
      is: [ bearerAuth ]
      queryParameters:
        <<queryParamName>>:
          description: Return <<resourcePathName>> that have their <<queryParamName>> matching the given value
          example: <<queryParamExample>>
          required: true
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>
typedCollection:
    type: collection
    get:
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>
permission:
    description: |
      Checks if a given user has permissions.
    get:
      is: [permissionTestable, bearerAuth]
project:
    type: base
    get:
      responses:
        200:
          body:
            application/json:
              schema: <<schema>>
              example: <<example>>


